
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##	Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##	Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##	Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
   
[gcode_macro PRINT_START]
gcode:    
    {% set bedTemp = params.BED|default(0)|float %}
    {% set extTemp = params.EXTRUDER|default(0)|int %}
    {% set exhaustFan = params.EXHAUST_FAN|default(0)|int %} 
#    {% set chaTemp = params.CHAMBER|default(0)|float %}                 ; Get/Set chamber temperature
#    {% if params.SOAK != null %}
#        {% set heatSoak = params.SOAK|default(8)|int %}                 ; Get/Set heat soak time
#    {% endif %}
    
    # Dummy console out
    {action_respond_info("bedTemp : " + '%s' % bedTemp)}                ; Bed Temperature
    {action_respond_info("extTemp : " + '%s' % extTemp)}                ; First Layer Temperature
    {action_respond_info("chaTemp : " + '%s' % chaTemp)}                ; Chamber temperature time
#    {action_respond_info("heatSoak: " + '%s' % heatSoak)}               ; Heat Soak time

    SET_FAN_SPEED FAN=exhaust_fan SPEED={exhaustFan}

    # Prepare
    M117 Home & QGL
    STATUS_HOMING                                   ; Stealthburner light control
    G28                           ; home if not already homed
    BED_MESH_CLEAR
  
    # Heat soak
    M117 Starting Warmup                            ; If the bed is already at the correct target temp, we assume no heat soak is necessary.
#    {% if (heatSoak) <= 0 or (printer.heater_bed.target >= (bedTemp - 20)) %}
#    {% else %}
        M117 Heating for Soak
        M190 S{bedTemp}                             ; Set and wait heated bed temperature
        M117 Starting Soak 
#    {% for timer in range(heatSoak,0,-1) %}         ; Cycle once a minute, so we can send an update to keep octoprint happy, rather than just sleeping for the entire soak
#        M117 Soak: {timer|int}m remaining           
#        M105                                        ; Report Temperatures
#        G4 P60000                                   ; Pause for 1 Minute
#    {% endfor %}
#        M117 Soak Complete
#    {% endif %}


    # Heat hotend to 150c. This helps with getting a correct Z-home.
    M104 S150                                            # Start heating the hotend
    SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
    STATUS_LEVELING                                      # Set LEDs to leveling-mode
    QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
    G28 Z                                                # Home Z again after QGL
    SET_DISPLAY_TEXT MSG="Hotend: 150c"                  # Display info on display
    M109 S150                                            # this time, wait for hotend
    CARTOGRAPHER_TOUCH

    # Prepare extruder
    _CLEAN_WAIT_GANTRY
    M117 Extruder heating
    M109 S{extTemp|int}                             ; M109 heat and wait for extruder it to reach temp

    # Clean nozzle
    _CLEAN_NOZZLE_GANTRY_LOOP

    SKEW_PROFILE LOAD=CaliFlower

    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.05

    # Start print
    SET_DISPLAY_TEXT MSG="Printing"
    STATUS_PRINTING                                 ; Stealthburner light control
    M117 Printing   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament

    {% if printer.toolhead.position.z|float < (printer.toolhead.axis_maximum.z -1) %}
      G91 ; relative positioning
      G1 Z1 F3000                    ; move nozzle up 2mm if we have room for that
    {% endif %}
    G90
    G1 X34 Y320 F40000 ; prevent stringing by moving close to the wiping pad
    TURN_OFF_HEATERS
    SET_FAN_SPEED FAN=exhaust_fan SPEED=1.0
    M107                           ; turn off fan
    _CLEAN_NOZZLE_GANTRY

#    {% set cooled_down_temp = printer['temperature_sensor extruder'].temperature * 0.8 |int %} 
    {% for _ in range(1,25) %}
#    {%   if printer['temperature_sensor extruder'].temperature < cooled_down_temp %}
#    {%     break %}
#    {%   endif %}
    _CLEAN_NOZZLE_GANTRY_LOOP      ; clean nozzle against silicone brush
    G4 P500
    {% endfor %}

    BED_MESH_CLEAR
    SET_SKEW CLEAR=1               ; reset CaliFlower skew
    
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    _CLEAN_WAIT_GANTRY

[gcode_macro CUSTOM_HOMING]
gcode:
    SAVE_GCODE_STATE NAME=CUSTOM_HOMING_state
    STATUS_MESSAGE MSG="Homing request"

    {% set do_x = false %}
    {% set do_y = false %}
    {% set do_z = false %}

    {% if params.X is defined %}
        {% set do_x = true %}
    {% endif %}
    {% if params.X is defined %}
        {% set do_y = true %}
    {% endif %}

    {% if params.Z is defined %}
        {% set do_x = true if do_x else 'x' not in printer.toolhead.homed_axes %}
        {% set do_y = true if do_y else 'y' not in printer.toolhead.homed_axes %}
        {% set do_z = true %}
    {% endif %}

    {% if do_xy == false and do_z == false %}
        {% set do_x = true if do_x else 'x' not in printer.toolhead.homed_axes %}
        {% set do_y = true if do_y else 'y' not in printer.toolhead.homed_axes %}
        {% set do_z = true %}
    {% endif %}

    SET_DISPLAY_TEXT MSG="Homing "
    {% if do_x %}
        G28 X
    {% endif %}
    {% if do_y %}
        G28 Y
    {% endif %}
    
    {% if do_z %}
        G28 Z
        M104 S150                                            # Start heating the hotend
        SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
        STATUS_LEVELING                                      # Set LEDs to leveling-mode
        QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
        G28 Z                                                # Home Z again after QGL
        SET_DISPLAY_TEXT MSG="Hotend: 150c"                  # Display info on display
        M109 S150                                            # this time, wait for hotend
        CARTOGRAPHER_TOUCH
    {% endif %}

    RESTORE_GCODE_STATE NAME=CUSTOM_HOMING_state

[gcode_macro G28]
rename_existing: G009928
gcode:
    CUSTOM_HOMING{" X=1" if params.X is defined}{" Y=1" if params.Y is defined}{" Z=1" if params.Z is defined}


[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E101 F300 # fast-load
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E25 F1000 # purge
    G1 E-101 F1500 # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

#        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F40000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
#        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
#    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F40000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F40000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    _CLEAN_WAIT_GANTRY
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F40000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F40000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro _CLEAN_WAIT_GANTRY]
gcode:
   SAVE_GCODE_STATE NAME=clean_wait_gantry
   G1 X24 Y320 F40000
   G1 X24 Y356 F1800
   RESTORE_GCODE_STATE NAME=clean_wait_gantry

[gcode_macro _CLEAN_NOZZLE_GANTRY]
gcode:
   SAVE_GCODE_STATE NAME=clean_nozzle_gantry
   G90
   G1 X34 Y320 F40000
   _CLEAN_NOZZLE_GANTRY_LOOP
   RESTORE_GCODE_STATE NAME=clean_nozzle_gantry

[gcode_macro _CLEAN_NOZZLE_GANTRY_LOOP]
gcode:
   SAVE_GCODE_STATE NAME=clean_nozzle_gantry_loop
   G90
   G1 X34 Y356 F1800
   G1 X64 Y354 F1800
   G1 X34 Y356 F1800
   G1 X64 Y353 F1800
   RESTORE_GCODE_STATE NAME=clean_nozzle_gantry_loop

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x %}
        {% if x_min < 0 %}
            {% set x_min = 0 %}
        {% endif %}
    
        {% set y_min = printer.toolhead.axis_minimum.y %}
        {% if y_min < 0 %}
            {% set y_min = 0 %}
        {% endif %}
    
        {% set x_min = x_min + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = y_min + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    

